name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            generator: "Unix Makefiles"
          - os: windows-latest
            generator: "MinGW Makefiles"

    env:
      BUILD_DIR: build
      BuildType: Release
      InitFwOption: FULL
      ExternalAlgoOption: "ON"

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Arm GCC toolchain
        uses: carlosperate/arm-none-eabi-gcc-action@v1

      - name: Install GNU Make (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: choco install make -y

      - name: Configure project with CMake
        run: cmake -S . -B ${{ github.workspace }}/${{ env.BUILD_DIR }} \
          -G "${{ matrix.generator }}" \
          -DCMAKE_TOOLCHAIN_FILE="CMakeToolchains/arm-none-eabi-m4.cmake" \
          -DINCLUDE_SHASTA_SUPPORT:BOOL=ON \
          -DCMAKE_BUILD_TYPE="${{ env.BuildType }}" \
          -DCHIRP_INIT_FW_TYPE="${{ env.InitFwOption }}" \
          -DINCLUDE_ALGO_EXTERNAL:BOOL="${{ env.ExternalAlgoOption }}"

      - name: Build project
        run: cmake --build ${{ github.workspace }}/${{ env.BUILD_DIR }} --parallel

      - name: Extract project version from header
        if: matrix.os == 'ubuntu-latest'
        id: extract_version
        shell: bash
        run: |
          MAJOR=$(grep -E '^#define SONICLIB_VER_MAJOR' invn/soniclib/soniclib.h | grep -Eo '[0-9]+')
          MINOR=$(grep -E '^#define SONICLIB_VER_MINOR' invn/soniclib/soniclib.h | grep -Eo '[0-9]+')
          REV=$(grep -E '^#define SONICLIB_VER_REV' invn/soniclib/soniclib.h | grep -Eo '[0-9]+')
          SUFFIX=$(grep -E '^#define SONICLIB_VER_SUFFIX' invn/soniclib/soniclib.h | cut -d '"' -f2)

          if [ -z "$SUFFIX" ]; then
            VERSION="$MAJOR.$MINOR.$REV"
          else
            VERSION="$MAJOR.$MINOR.$REV-$SUFFIX"
          fi

          echo "Extracted SonicLib version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get latest Git tag (skip ghpages_ tags)
        if: matrix.os == 'ubuntu-latest'
        id: latest_tag
        uses: actions/github-script@v6
        with:
          script: |
            const tags = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 5
            });
      
            if (tags.data.length === 0) {
              throw new Error("No tags found in the repository.");
            }
      
            let selectedTag = null;
            let skippedTags = [];
      
            for (const tag of tags.data) {
              const name = tag.name;
              if (name.startsWith("ghpages_")) {
                skippedTags.push(name);
                continue;
              }
              selectedTag = name;
              break;
            }
      
            if (selectedTag) {
              console.log("‚úÖ Selected tag for comparison:", selectedTag);
              core.setOutput("tag_name", selectedTag);
              core.setOutput("skip_check", "false");
            } else {
              console.log("‚ö†Ô∏è No valid tag found (only ghpages_ tags present). Skipping version check.");
              console.log("Skipped tags:", skippedTags.join(", "));
              core.setOutput("tag_name", "");
              core.setOutput("skip_check", "true");
            }
        

      - name: Compare project version with latest valid Git tag
        if: matrix.os == 'ubuntu-latest'
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          TAG="${{ steps.latest_tag.outputs.tag_name }}"
          SKIP="${{ steps.latest_tag.outputs.skip_check }}"
      
          echo "== Version Check =="
          echo "Extracted version : $VERSION"
          echo "Selected tag      : $TAG"
          echo "Skip check?       : $SKIP"
      
          if [ "$SKIP" = "true" ]; then
            echo "‚ÑπÔ∏è Skipping version comparison because no valid (non-ghpages_) tag was found."
            exit 0
          fi
      
          if [ "$VERSION" != "$TAG" ]; then
            echo "::error::Project version ($VERSION) does not match latest valid Git tag ($TAG)"
            exit 1
          else
            echo "‚úÖ Project version matches the latest Git tag."
          fi

      - name: ‚úÖ CI successful message
        if: ${{ success() && matrix.os == 'ubuntu-latest' }}
        run: echo "üéâ Build and version check passed successfully on ubuntu!"
       
